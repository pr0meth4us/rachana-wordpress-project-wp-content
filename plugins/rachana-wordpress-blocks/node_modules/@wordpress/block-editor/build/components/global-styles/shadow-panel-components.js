"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShadowIndicator = ShadowIndicator;
exports.ShadowPopover = ShadowPopover;
exports.ShadowPopoverContainer = ShadowPopoverContainer;
exports.ShadowPresets = ShadowPresets;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _classnames = _interopRequireDefault(require("classnames"));
/**
 * WordPress dependencies
 */

/**
 * External dependencies
 */

function ShadowPopoverContainer({
  shadow,
  onShadowChange,
  settings
}) {
  const defaultShadows = settings?.shadow?.presets?.default;
  const themeShadows = settings?.shadow?.presets?.theme;
  const defaultPresetsEnabled = settings?.shadow?.defaultPresets;
  const shadows = [...(defaultPresetsEnabled ? defaultShadows : []), ...(themeShadows || [])];
  return (0, _react.createElement)("div", {
    className: "block-editor-global-styles__shadow-popover-container"
  }, (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: 4
  }, (0, _react.createElement)(_components.__experimentalHeading, {
    level: 5
  }, (0, _i18n.__)('Drop shadow')), (0, _react.createElement)(ShadowPresets, {
    presets: shadows,
    activeShadow: shadow,
    onSelect: onShadowChange
  })));
}
function ShadowPresets({
  presets,
  activeShadow,
  onSelect
}) {
  return !presets ? null : (0, _react.createElement)(_components.__experimentalGrid, {
    columns: 6,
    gap: 0,
    align: "center",
    justify: "center"
  }, presets.map(({
    name,
    slug,
    shadow
  }) => (0, _react.createElement)(ShadowIndicator, {
    key: slug,
    label: name,
    isActive: shadow === activeShadow,
    onSelect: () => onSelect(shadow === activeShadow ? undefined : shadow),
    shadow: shadow
  })));
}
function ShadowIndicator({
  label,
  isActive,
  onSelect,
  shadow
}) {
  return (0, _react.createElement)("div", {
    className: "block-editor-global-styles__shadow-indicator-wrapper"
  }, (0, _react.createElement)(_components.Button, {
    className: "block-editor-global-styles__shadow-indicator",
    onClick: onSelect,
    label: label,
    style: {
      boxShadow: shadow
    },
    showTooltip: true
  }, isActive && (0, _react.createElement)(_icons.Icon, {
    icon: _icons.check
  })));
}
function ShadowPopover({
  shadow,
  onShadowChange,
  settings
}) {
  const popoverProps = {
    placement: 'left-start',
    offset: 36,
    shift: true
  };
  return (0, _react.createElement)(_components.Dropdown, {
    popoverProps: popoverProps,
    className: "block-editor-global-styles__shadow-dropdown",
    renderToggle: renderShadowToggle(),
    renderContent: () => (0, _react.createElement)(_components.__experimentalDropdownContentWrapper, {
      paddingSize: "medium"
    }, (0, _react.createElement)(ShadowPopoverContainer, {
      shadow: shadow,
      onShadowChange: onShadowChange,
      settings: settings
    }))
  });
}
function renderShadowToggle() {
  return ({
    onToggle,
    isOpen
  }) => {
    const toggleProps = {
      onClick: onToggle,
      className: (0, _classnames.default)({
        'is-open': isOpen
      }),
      'aria-expanded': isOpen
    };
    return (0, _react.createElement)(_components.Button, {
      ...toggleProps
    }, (0, _react.createElement)(_components.__experimentalHStack, {
      justify: "flex-start"
    }, (0, _react.createElement)(_icons.Icon, {
      className: "block-editor-global-styles__toggle-icon",
      icon: _icons.shadow,
      size: 24
    }), (0, _react.createElement)(_components.FlexItem, null, (0, _i18n.__)('Drop shadow'))));
  };
}
//# sourceMappingURL=shadow-panel-components.js.map